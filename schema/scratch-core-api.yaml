openapi: 3.0.0
info:
  title: Scratch Core API
  version: 1.0.0
  description: Core API endpoints for managing Scratch projects, studios, and user
    data. These endpoints are often accessed via proxies on the
    `scratch.mit.edu` domain or directly via `api.scratch.mit.edu`.
servers:
  - url: https://api.scratch.mit.edu
    description: Production Scratch API server
  - url: https://projects.scratch.mit.edu
    description: CDN for project assets
paths:
  /projects/{id}:
    put:
      summary: Update Project Instructions or Notes and Credits
      description: Updates the instructions or notes and credits for a project.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: The ID of the project to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              version: "3.1"
              components:
                schemas:
                  ProjectUpdateRequestBody:
                    type: object
                    properties:
                      instructions:
                        type: string
                      notesAndCredits:
                        type: string
                    required: []
              schema:
                $ref: "#/components/schemas/ProjectUpdateRequestBody"
      responses:
        "200":
          description: Project updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectInfo"
        "400":
          description: Bad Request (e.g., inappropriate content, text too long).
        "403":
          description: Forbidden (e.g., insufficient permissions, user muted).
    get:
      summary: Get Project Information
      description: Retrieves detailed information about a specific project.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: The ID of the project.
      responses:
        "200":
          description: Project details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectInfo"
  /users/{username}/projects:
    get:
      summary: Get User's Shared Projects
      description: Retrieves a list of projects shared by a specific user.
      parameters:
        - in: path
          name: username
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
          description: The username of the user.
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: Maximum number of projects to return.
        - in: query
          name: offset
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: Offset for pagination.
      responses:
        "200":
          description: An array of project objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectInfo"
  /users/{username}/favorites:
    get:
      summary: Get User's Favorited Projects
      description: Retrieves a list of projects favorited by a specific user.
      parameters:
        - in: path
          name: username
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
          description: The username of the user.
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: Maximum number of projects to return.
        - in: query
          name: offset
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: Offset for pagination.
      responses:
        "200":
          description: An array of favorited project objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectInfo"
  /users/{username}/projects/recentlyviewed:
    get:
      summary: Get User's Recently Viewed Projects
      description: Retrieves a list of projects recently viewed by the authenticated user.
      parameters:
        - in: path
          name: username
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
          description: The username of the user.
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: Maximum number of projects to return.
        - in: query
          name: offset
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: Offset for pagination.
      responses:
        "200":
          description: An array of recently viewed project objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectInfo"
  /classrooms/{classroomId}/projects:
    get:
      summary: Get Projects in a Classroom
      description: Retrieves a list of projects associated with a specific classroom.
      parameters:
        - in: path
          name: classroomId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: The ID of the classroom.
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: Maximum number of projects to return.
        - in: query
          name: offset
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: Offset for pagination.
      responses:
        "200":
          description: An array of projects in the specified classroom.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectInfo"
  /projects/{projectId}/comments/{parentId}/replies:
    get:
      summary: Get Replies to a Project Comment
      description: Retrieves replies for a specific top-level project comment.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: The ID of the project.
        - in: path
          name: parentId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: The ID of the parent comment.
        - in: query
          name: offset
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: Offset for pagination.
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: Maximum number of replies to return.
      responses:
        "200":
          description: An array of comment reply objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
  /projects/{id}/comments:
    get:
      summary: Get Top-Level Project Comments
      description: Retrieves a list of top-level comments for a project.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: The ID of the project.
        - in: query
          name: offset
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: Offset for pagination.
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: Maximum number of comments to return.
      responses:
        "200":
          description: An array of top-level comment objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
  /projects/{projectId}/comments/{commentId}:
    get:
      summary: Get Specific Project Comment
      description: Retrieves a single project comment by its ID.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: The ID of the project the comment belongs to.
        - in: path
          name: commentId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
          description: The ID of the comment to retrieve.
      responses:
        "200":
          description: A single comment object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
  /proxy/comments/project/{projectId}/comment/{commentId}:
    delete:
      summary: Delete a Project Comment (Proxied)
      description: Proxied endpoint to delete a specific comment on a project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: path
          name: commentId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: Comment deleted successfully.
        "403":
          description: Forbidden (e.g., insufficient permissions).
  /proxy/project/{projectId}/comment/{commentId}/report:
    post:
      summary: Report a Project Comment (Proxied)
      description: Proxied endpoint to report a specific comment on a project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: path
          name: commentId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: Comment reported successfully.
        "403":
          description: Forbidden (e.g., insufficient permissions).
  /proxy/admin/project/{projectId}/comment/{commentId}/undelete:
    put:
      summary: Restore a Deleted Project Comment (Admin Proxied)
      description: Proxied endpoint to restore a previously deleted project comment.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: path
          name: commentId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: Comment restored successfully.
        "403":
          description: Forbidden (e.g., insufficient permissions).
  /studios/{studioId}/comments/{parentId}/replies:
    get:
      summary: Get Replies to a Studio Comment
      description: Retrieves replies for a specific top-level studio comment.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: path
          name: parentId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: offset
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: An array of comment reply objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
  /studios/{id}/comments:
    get:
      summary: Get Top-Level Studio Comments
      description: Retrieves a list of top-level comments for a studio.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: offset
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: An array of top-level comment objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
  /studios/{studioId}/comments/{commentId}:
    get:
      summary: Get Specific Studio Comment
      description: Retrieves a single studio comment by its ID.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: path
          name: commentId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: A single comment object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
  /proxy/comments/studio/{studioId}/comment/{commentId}:
    delete:
      summary: Delete a Studio Comment (Proxied)
      description: Proxied endpoint to delete a specific comment in a studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: path
          name: commentId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: Comment deleted successfully.
        "403":
          description: Forbidden (e.g., insufficient permissions).
  /proxy/studio/{studioId}/comment/{commentId}/report:
    post:
      summary: Report a Studio Comment (Proxied)
      description: Proxied endpoint to report a specific comment in a studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: path
          name: commentId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: Comment reported successfully.
        "403":
          description: Forbidden (e.g., insufficient permissions).
  /proxy/admin/studio/{studioId}/comment/{commentId}/undelete:
    put:
      summary: Restore a Deleted Studio Comment (Admin Proxied)
      description: Proxied endpoint to restore a previously deleted studio comment.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: path
          name: commentId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: Comment restored successfully.
        "403":
          description: Forbidden (e.g., insufficient permissions).
  /studios/{studioId}/managers/:
    get:
      summary: Get Studio Managers
      description: Retrieves a list of managers for a specific studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: offset
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: An array of studio manager objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StudioMember"
  /studios/{studioId}/curators/:
    get:
      summary: Get Studio Curators
      description: Retrieves a list of curators for a specific studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: offset
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: An array of studio curator objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StudioMember"
  /studios/{studioId}/transfer/{newHostName}:
    put:
      summary: Transfer Studio Host
      description: Transfers the host role of a studio to another manager. Requires
        password for confirmation.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: path
          name: newHostName
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              version: "3.1"
              components:
                schemas: {}
              schema:
                type: object
                properties:
                  password:
                    type: string
                required:
                  - password
      responses:
        "200":
          description: Studio host transferred successfully.
        "401":
          description: Unauthorized (e.g., incorrect password, too many attempts).
        "409":
          description: Conflict (e.g., user cannot become host).
  /studios/{studioId}/activity/:
    get:
      summary: Get Studio Activity
      description: Retrieves a list of recent activities for a specific studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: dateLimit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
      responses:
        "200":
          description: An array of studio activity objects.
          content:
            application/json:
              schema:
                type: array
                items: {}
  /studios/{studioId}:
    get:
      summary: Get Studio Information
      description: Retrieves basic information about a specific studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: Studio details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudioInfo"
  /studios/{studioId}/users/{username}:
    get:
      summary: Get User's Role in a Studio
      description: Retrieves the roles (manager, curator, follower, invited) of a
        specific user in a studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: path
          name: username
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
      responses:
        "200":
          description: User's role details in the studio.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudioUserRole"
  /studios/{studioId}/classroom:
    get:
      summary: Get Classroom Info for a Studio
      description: Retrieves details of the classroom associated with a specific studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: Classroom details associated with the studio.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassroomInfo"
  /search/{itemType}:
    get:
      summary: Search Projects or Studios
      description: Performs a search for projects or studios based on a query and
        various filters.
      parameters:
        - in: path
          name: itemType
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              oneOf:
                - const: projects
                - const: studios
          description: The type of items to search for.
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: offset
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: language
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
        - in: query
          name: mode
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              oneOf:
                - const: trending
                - const: popular
                - const: recent
        - in: query
          name: q
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
      responses:
        "200":
          description: An array of search result objects (projects or studios).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectInfo"
  /users/{username}/following/users/activity:
    get:
      summary: Get Activity of Users Followed by a User
      description: Retrieves a list of recent activities from users followed by the
        specified user.
      parameters:
        - in: path
          name: username
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: An array of activity objects.
          content:
            application/json:
              schema:
                type: array
                items: {}
  /proxy/featured:
    get:
      summary: Get Featured Content (Proxied)
      description: Proxied endpoint to retrieve various featured content sections
        (e.g., projects, studios).
      responses:
        "200":
          description: Featured content object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeaturedContentResponse"
  /users/{username}/following/users/projects:
    get:
      summary: Get Projects Shared by Users Followed by a User
      description: Retrieves projects recently shared by users that the specified user
        is following.
      parameters:
        - in: path
          name: username
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
      responses:
        "200":
          description: An array of project objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectInfo"
  /users/{username}/following/studios/projects:
    get:
      summary: Get Projects in Studios Followed by a User
      description: Retrieves projects from studios that the specified user is following.
      parameters:
        - in: path
          name: username
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
      responses:
        "200":
          description: An array of project objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectInfo"
  /users/{username}/following/users/loves:
    get:
      summary: Get Projects Loved by Users Followed by a User
      description: Retrieves projects recently loved by users that the specified user
        is following.
      parameters:
        - in: path
          name: username
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
      responses:
        "200":
          description: An array of project objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectInfo"
  /accounts/checkusername/{username}/:
    get:
      summary: Check Username Availability
      description: Checks if a given username is available or violates any rules.
      parameters:
        - in: path
          name: username
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
      responses:
        "200":
          description: Username check status message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                required:
                  - msg
  /accounts/checkpassword:
    post:
      summary: Check Password Strength
      description: Checks the strength and validity of a given password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              version: "3.1"
              components:
                schemas: {}
              schema:
                type: object
                properties:
                  password:
                    type: string
                required:
                  - password
      responses:
        "200":
          description: Password strength status message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                required:
                  - msg
  /accounts/check_email/:
    get:
      summary: Check Email Availability
      description: Checks if an email address is valid and available for use with Scratch.
      parameters:
        - in: query
          name: email
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: string
      responses:
        "200":
          description: Email availability status message.
          content:
            application/json:
              schema:
                type: array
                prefixItems:
                  - type: object
                    properties:
                      msg:
                        type: string
                    required:
                      - msg
                additionalItems: false
  /studios/{studioId}/projects/:
    get:
      summary: Get Projects in a Studio
      description: Retrieves a list of projects added to a specific studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: limit
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: query
          name: offset
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: An array of project objects in the studio.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectInfo"
  /studios/{studioId}/project/{projectId}:
    post:
      summary: Add Project to Studio
      description: Adds a specified project to a studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: path
          name: projectId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: Project added to studio successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectId:
                    type: number
                  actorId:
                    type: number
                required:
                  - projectId
                  - actorId
        "403":
          description: Forbidden (e.g., insufficient permissions, user muted).
        "404":
          description: Not Found (e.g., unknown project ID).
        "409":
          description: Conflict (e.g., project already in studio).
        "429":
          description: Too Many Requests (rate limit exceeded).
    delete:
      summary: Remove Project from Studio
      description: Removes a specified project from a studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
        - in: path
          name: projectId
          required: true
          schema:
            version: "3.1"
            components:
              schemas: {}
            schema:
              type: number
      responses:
        "200":
          description: Project removed from studio.
        "403":
          description: Forbidden (e.g., insufficient permissions).
components:
  schemas:
    ProjectInfo:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        instructions:
          type: string
        author:
          type: object
          properties:
            id:
              type: number
            username:
              type: string
            profile:
              type: object
              properties:
                images:
                  type: object
                  properties:
                    90x90:
                      type: string
                    60x60:
                      type: string
                    50x50:
                      type: string
                    32x32:
                      type: string
                  required: []
              required: []
          required:
            - id
            - username
        image:
          type: string
        history:
          type: object
          properties:
            created:
              type: string
            modified:
              type: string
            shared:
              type: string
          required:
            - created
            - modified
            - shared
        stats:
          type: object
          properties:
            views:
              type: number
            loves:
              type: number
            favorites:
              type: number
            comments:
              type: number
            remixes:
              type: number
          required:
            - views
            - loves
            - favorites
            - comments
            - remixes
        remix:
          type: object
          properties:
            parent:
              type: number
            root:
              type: number
          required:
            - parent
            - root
        project_token:
          type: string
      required:
        - id
        - title
        - instructions
        - author
        - image
        - history
        - stats
        - remix
    Comment:
      type: object
      properties:
        id:
          type: number
        content:
          type: string
        datetime_created:
          type: string
        author:
          type: object
          properties:
            id:
              type: number
            username:
              type: string
            image:
              type: string
            scratchteam:
              type: boolean
          required:
            - id
            - username
            - image
        parent_id:
          type: number
        commentee_id:
          type: number
        reply_count:
          type: number
        visibility:
          oneOf:
            - const: visible
            - const: markedbyfilter
            - const: reported
            - const: deleted
        is_admin:
          type: boolean
        is_comment_owner:
          type: boolean
        moreRepliesToLoad:
          type: boolean
      required:
        - id
        - content
        - datetime_created
        - author
    StudioMember:
      type: object
      properties:
        id:
          type: number
        username:
          type: string
        profile:
          type: object
          properties:
            id:
              type: number
            images:
              type: object
              properties:
                90x90:
                  type: string
                60x60:
                  type: string
                50x50:
                  type: string
                32x32:
                  type: string
              required:
                - 90x90
                - 60x60
                - 50x50
                - 32x32
          required:
            - id
            - images
      required:
        - id
        - username
        - profile
    StudioInfo:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        description:
          type: string
        image:
          type: string
        open_to_all:
          type: boolean
        comments_allowed:
          type: boolean
        history:
          type: object
          properties:
            created:
              type: string
            modified:
              type: string
          required:
            - created
            - modified
        stats:
          type: object
          properties:
            comments:
              type: number
            followers:
              type: number
            managers:
              type: number
            projects:
              type: number
          required:
            - comments
            - followers
            - managers
            - projects
        host:
          type: number
        public:
          type: boolean
      required:
        - id
        - title
        - description
        - image
        - open_to_all
        - comments_allowed
        - history
        - stats
        - host
        - public
    StudioUserRole:
      type: object
      properties:
        manager:
          type: boolean
        curator:
          type: boolean
        following:
          type: boolean
        invited:
          type: boolean
      required:
        - manager
        - curator
        - following
        - invited
    ClassroomInfo:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        educator:
          type: object
          properties:
            profile:
              type: object
              properties:
                country:
                  type: string
              required: []
          required: []
      required:
        - id
    FeaturedContentResponse:
      type: object
      properties:
        community_featured_projects:
          type: array
          items:
            $ref: "#/components/schemas/ProjectInfo"
        community_featured_studios:
          type: array
          items:
            $ref: "#/components/schemas/StudioInfo"
        curator_top_projects:
          type: array
          items:
            $ref: "#/components/schemas/ProjectInfo"
        scratch_design_studio:
          type: array
          items:
            $ref: "#/components/schemas/ProjectInfo"
        community_most_remixed_projects:
          type: array
          items:
            $ref: "#/components/schemas/ProjectInfo"
        community_most_loved_projects:
          type: array
          items:
            $ref: "#/components/schemas/ProjectInfo"
      required: []
