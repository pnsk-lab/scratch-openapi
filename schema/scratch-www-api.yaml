openapi: 3.0.0
info:
  title: Scratch WWW API
  version: 1.0.0
  description: API endpoints for core website functionalities, authentication,
    messaging, and site-level content management, primarily serving the
    `scratch.mit.edu` domain. Includes endpoints that function as proxies for
    other services.
servers:
  - url: https://scratch.mit.edu
    description: Production Scratch website and API proxy
paths:
  /accounts/login/:
    post:
      summary: User Login
      description: Authenticates a user with a username and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestBody"
      responses:
        "200":
          description: Login successful, redirect, or error message.
          content:
            application/json:
              schema:
                type: array
                prefixItems:
                  - $ref: "#/components/schemas/SuccessResponse.o1"
                additionalItems: false
        "302":
          description: Redirect after successful login (if not handled by JSON response).
  /accounts/logout/:
    post:
      summary: User Logout
      description: Logs out the current user, often via a form submission for CSRF.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                csrfmiddlewaretoken:
                  type: string
              required:
                - csrfmiddlewaretoken
      responses:
        "302":
          description: Redirect after logout.
  /site-api/messages/messages-clear/:
    post:
      summary: Clear Unread Message Count
      description: Clears the unread message count for the authenticated user.
      responses:
        "200":
          description: Message count cleared successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
  /site-api/messages/messages-delete/:
    post:
      summary: Delete Admin Message
      description: Deletes a specific admin message or notification for the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteAdminMessageRequestBody"
      responses:
        "200":
          description: Admin message deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
  /users/{username}/messages:
    get:
      summary: Get User Messages
      description: Retrieves a list of social messages for a given user.
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user.
        - in: query
          name: limit
          schema:
            type: number
          description: Maximum number of messages to return.
        - in: query
          name: offset
          schema:
            type: number
          description: Offset for pagination.
        - in: query
          name: filter
          schema:
            oneOf:
              - const: ""
              - const: all
              - const: comments
              - const: projects
              - const: studios
              - const: forums
          description: Filter messages by type.
        - in: query
          name: language
          schema:
            type: string
          description: Preferred language for messages.
      responses:
        "200":
          description: An array of user message objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserMessage"
  /users/{username}/messages/admin:
    get:
      summary: Get Admin Messages for a User
      description: Retrieves messages from the Scratch Team for a specific user.
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user.
      responses:
        "200":
          description: An array of admin message objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AdminMessage"
  /users/{username}/invites:
    get:
      summary: Get Scratcher Invitation Status
      description: Checks if a user has an invitation to become a Scratcher.
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: The username of the user.
      responses:
        "200":
          description: Scratcher invite object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScratcherInvite"
  /site-api/galleries/all/{studioId}/:
    put:
      summary: Update Studio Title or Description
      description: Allows a studio's title or description to be updated.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            type: number
          description: The ID of the studio to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
              required: []
      responses:
        "200":
          description: Studio updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudioUpdateResponse"
        "400":
          description: Bad Request (e.g., inappropriate content, text too long, required
            field).
        "403":
          description: Forbidden (e.g., insufficient permissions, user muted).
    post:
      summary: Update Studio Thumbnail
      description: Allows a studio's thumbnail image to be updated.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            type: number
          description: The ID of the studio whose thumbnail is to be updated.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
              required:
                - file
      responses:
        "200":
          description: Studio image updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudioUpdateResponse"
        "400":
          description: Bad Request (e.g., thumbnail too large, image invalid).
        "403":
          description: Forbidden (e.g., insufficient permissions).
  /site-api/users/bookmarkers/{studioId}/add/:
    put:
      summary: Follow a Studio
      description: Adds the authenticated user as a follower of the specified studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            type: number
          description: The ID of the studio to follow.
        - in: query
          name: usernames
          required: true
          schema:
            type: string
          description: The username of the user to add as a follower.
      responses:
        "200":
          description: Studio followed successfully.
        "403":
          description: Forbidden (e.g., email not confirmed).
  /site-api/users/bookmarkers/{studioId}/remove/:
    put:
      summary: Unfollow a Studio
      description: Removes the authenticated user as a follower of the specified studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            type: number
          description: The ID of the studio to unfollow.
        - in: query
          name: usernames
          required: true
          schema:
            type: string
          description: The username of the user to remove as a follower.
      responses:
        "200":
          description: Studio unfollowed successfully.
        "403":
          description: Forbidden (e.g., insufficient permissions).
  /site-api/comments/gallery/{studioId}/toggle-comments/:
    post:
      summary: Toggle Studio Comments
      description: Toggles whether comments are allowed on a specific studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            type: number
          description: The ID of the studio.
      responses:
        "200":
          description: Studio comments toggled successfully.
        "403":
          description: Forbidden (e.g., insufficient permissions, user muted).
  /site-api/galleries/{studioId}/mark/open/:
    put:
      summary: Set Studio to Open to All
      description: Sets the specified studio to allow anyone to add projects.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            type: number
          description: The ID of the studio.
      responses:
        "200":
          description: Studio set to open to all.
        "403":
          description: Forbidden (e.g., insufficient permissions).
  /site-api/galleries/{studioId}/mark/closed/:
    put:
      summary: Set Studio to Closed
      description: Sets the specified studio to only allow managers/curators to add
        projects.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            type: number
          description: The ID of the studio.
      responses:
        "200":
          description: Studio set to closed.
        "403":
          description: Forbidden (e.g., insufficient permissions).
  /site-api/users/curators-in/{studioId}/remove/:
    put:
      summary: Remove Curator or Manager from Studio
      description: Removes a user from the curator or manager role in a studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            type: number
          description: The ID of the studio.
        - in: query
          name: usernames
          required: true
          schema:
            type: string
          description: The username of the user to remove.
      responses:
        "200":
          description: User removed from studio role.
        "403":
          description: Forbidden (e.g., insufficient permissions, user muted).
  /site-api/users/curators-in/{studioId}/invite_curator/:
    put:
      summary: Invite Curator to Studio
      description: Invites a user to become a curator of the specified studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            type: number
          description: The ID of the studio.
        - in: query
          name: usernames
          required: true
          schema:
            type: string
          description: The username of the user to invite.
      responses:
        "200":
          description: Curator invited to studio.
        "403":
          description: Forbidden (e.g., insufficient permissions, user muted).
        "404":
          description: Not Found (e.g., unknown username).
        "409":
          description: Conflict (e.g., user is already a curator).
        "429":
          description: Too Many Requests (rate limit exceeded).
  /site-api/users/curators-in/{studioId}/promote/:
    put:
      summary: Promote Curator to Manager
      description: Promotes an existing curator to a manager role in the specified studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            type: number
          description: The ID of the studio.
        - in: query
          name: usernames
          required: true
          schema:
            type: string
          description: The username of the curator to promote.
      responses:
        "200":
          description: Curator promoted to manager.
        "400":
          description: Bad Request (e.g., manager limit reached).
        "403":
          description: Forbidden (e.g., insufficient permissions, user muted).
  /site-api/users/curators-in/{studioId}/add/:
    put:
      summary: Accept Curator Invitation for Studio
      description: Allows a user to accept an invitation to become a curator of a studio.
      parameters:
        - in: path
          name: studioId
          required: true
          schema:
            type: number
          description: The ID of the studio.
        - in: query
          name: usernames
          required: true
          schema:
            type: string
          description: The username of the user accepting the invite.
      responses:
        "200":
          description: Curator invitation accepted.
        "403":
          description: Forbidden (e.g., insufficient permissions, user muted).
  /news:
    get:
      summary: Get Latest News Posts
      description: Retrieves a list of recent news posts from the Scratch website.
      parameters:
        - in: query
          name: limit
          schema:
            type: number
          description: Maximum number of news posts to return.
      responses:
        "200":
          description: An array of news post objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NewsPost"
  /scratch_admin/homepage/clear-cache/:
    post:
      summary: Clear Homepage Cache (Admin Only)
      description: Triggers a cache clear for the homepage, accessible only by
        administrators.
      responses:
        "200":
          description: Cache clear status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
  /site-api/users/set-template-cue/:
    post:
      summary: Set User Template Cue
      description: Sets a template cue (e.g., dismiss banners) for the authenticated user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cue:
                  type: string
                value:
                  type: boolean
              required:
                - cue
                - value
      responses:
        "200":
          description: Template cue set successfully.
  /session/:
    get:
      summary: Get User Session Information
      description: Retrieves detailed session information for the current user,
        including user data, permissions, and feature flags.
      responses:
        "200":
          description: User session details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSession"
  /classtoken/{classroomToken}:
    get:
      summary: Get Classroom Info by Token
      description: Retrieves classroom details using a unique classroom token.
      parameters:
        - in: path
          name: classroomToken
          required: true
          schema:
            type: string
          description: The unique token for the classroom.
      responses:
        "200":
          description: Classroom details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClassroomInfo"
        "404":
          description: Classroom not found for the given token.
  /classes/register_new_student/:
    post:
      summary: Register New Student in Classroom
      description: Registers a new student account linked to a specific classroom.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
      responses:
        "200":
          description: Student registration status.
          content:
            application/json:
              schema:
                type: array
                prefixItems:
                  - $ref: "#/components/schemas/RegistrationResponse.o1"
                additionalItems: false
  /classes/student_update_registration/:
    post:
      summary: Update Student Registration Info
      description: Updates personal information for an existing student account.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
      responses:
        "200":
          description: Student registration update status.
          content:
            application/json:
              schema:
                type: array
                prefixItems:
                  - $ref: "#/components/schemas/RegistrationResponse.o1"
                additionalItems: false
  /scratchr2/static/sa/{path}:
    get:
      summary: Get Scratch 2.0 Offline Editor Version XML
      description: Retrieves version information for the Scratch 2.0 Offline Editor,
        served as an XML file.
      parameters:
        - in: path
          name: path
          required: true
          schema:
            oneOf:
              - const: version.xml
              - const: pt-br/version.xml
          description: Path to the version XML file.
      responses:
        "200":
          description: XML content with version info.
          content:
            application/xml:
              schema:
                type: string
  /ideas/videos/{playlistKey}:
    get:
      summary: Proxy to YouTube Playlist Videos
      description: This endpoint serves as an internal proxy on the Scratch WWW server
        to fetch video data from YouTube playlists. The actual YouTube API is
        called server-side from Scratch.
      parameters:
        - in: path
          name: playlistKey
          required: true
          schema:
            oneOf:
              - const: sprites-and-vectors
              - const: tips-and-tricks
              - const: advanced-topics
          description: Identifier for the YouTube playlist.
      responses:
        "200":
          description: Array of video objects from the playlist.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/YoutubeVideoData"
components:
  schemas:
    LoginRequestBody:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        useMessages:
          type: boolean
      required:
        - username
        - password
    SuccessResponse.o1:
      type: object
      properties:
        success:
          type: boolean
        redirect:
          type: string
        msg:
          type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/Recordstringunknown"
        errors:
          $ref: "#/components/schemas/RecordstringArraystring"
      required:
        - success
    Recordstringunknown:
      type: object
      properties: {}
      required: []
      description: Construct a type with a set of properties K of type T
      additionalProperties: {}
    RecordstringArraystring:
      type: object
      properties: {}
      required: []
      description: Construct a type with a set of properties K of type T
      additionalProperties:
        type: array
        items:
          type: string
    DeleteAdminMessageRequestBody:
      type: object
      properties:
        alertType:
          oneOf:
            - const: invite
            - const: notification
        alertId:
          type: number
      required:
        - alertType
        - alertId
    UserMessage:
      type: object
      properties:
        id:
          type: number
        type:
          type: string
        datetime_created:
          type: string
        actor_username:
          type: string
        project_id:
          type: number
        project_title:
          type: string
        comment_id:
          type: number
        comment_fragment:
          type: string
        comment_obj_id:
          type: number
        comment_obj_title:
          type: string
        comment_type:
          type: number
        follower_username:
          type: string
        studio_id:
          type: number
        studio_title:
          type: string
        topic_id:
          type: number
        topic_title:
          type: string
        recipient_username:
          type: string
        admin_actor:
          type: boolean
      required:
        - id
        - type
        - datetime_created
    AdminMessage:
      type: object
      properties:
        id:
          type: number
        message:
          type: string
        datetime_created:
          type: string
      required:
        - id
        - message
        - datetime_created
    ScratcherInvite:
      type: object
      properties:
        id:
          type: number
        datetime_created:
          type: string
      required:
        - id
        - datetime_created
    StudioUpdateResponse:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        thumbnail_url:
          type: string
      required: []
    NewsPost:
      type: object
      properties:
        id:
          type: number
        headline:
          type: string
        copy:
          type: string
        url:
          type: string
        image:
          type: string
      required:
        - id
        - headline
        - copy
        - url
        - image
    UserSession:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: number
            username:
              type: string
            email:
              type: string
            token:
              type: string
            thumbnailUrl:
              type: string
            dateJoined:
              type: string
            classroomId:
              type: string
            banned:
              type: boolean
          required:
            - id
            - username
        permissions:
          type: object
          properties:
            admin:
              type: boolean
            social:
              type: boolean
            educator:
              type: boolean
            educator_invitee:
              type: boolean
            student:
              type: boolean
            mute_status:
              type: object
              properties:
                muteExpiresAt:
                  type: number
                offenses:
                  type: array
                  items: {}
                currentMessageType:
                  type: string
                showWarning:
                  type: boolean
              required:
                - muteExpiresAt
                - offenses
          required: []
        flags:
          type: object
          properties:
            must_reset_password:
              type: boolean
            must_complete_registration:
              type: boolean
            has_outstanding_email_confirmation:
              type: boolean
            show_welcome:
              type: boolean
            confirm_email_banner:
              type: boolean
            unsupported_browser_banner:
              type: boolean
            with_parent_email:
              type: boolean
          required: []
        banned:
          type: boolean
        vpn_required:
          type: boolean
        redirectURL:
          type: string
      required: []
    ClassroomInfo:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        educator:
          type: object
          properties:
            profile:
              type: object
              properties:
                country:
                  type: string
              required: []
          required: []
      required:
        - id
    RegistrationRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        birth_month:
          type: string
        birth_year:
          type: string
        gender:
          type: string
        country:
          type: string
        is_robot:
          type: boolean
        g-recaptcha-response:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        organization_name:
          type: string
        organization_title:
          type: string
        organization_type:
          type: string
        organization_other:
          type: string
        organization_url:
          type: string
        address_country:
          type: string
        address_line1:
          type: string
        address_line2:
          type: string
        address_city:
          type: string
        address_state:
          type: string
        address_zip:
          type: string
        how_use_scratch:
          type: string
        classroom_id:
          type: number
        classroom_token:
          type: string
        subscribe:
          type: boolean
      required: []
    RegistrationResponse.o1:
      type: object
      properties:
        success:
          type: boolean
        msg:
          type: string
        redirect:
          type: string
        errors:
          $ref: "#/components/schemas/RecordstringArraystring"
        status:
          type: object
          properties:
            mute_status:
              type: object
              properties:
                muteExpiresAt:
                  type: number
                offenses:
                  type: array
                  items: {}
                currentMessageType:
                  type: string
                showWarning:
                  type: boolean
              required:
                - muteExpiresAt
                - offenses
          required: []
      required:
        - success
    YoutubeVideoData:
      type: object
      properties:
        videoId:
          type: string
        title:
          type: string
        thumbnail:
          type: string
        channel:
          type: string
        uploadTime:
          type: string
        length:
          type: string
        views:
          type: string
        hasCC:
          type: boolean
      required:
        - videoId
        - title
        - thumbnail
        - channel
        - uploadTime
        - length
        - views
        - hasCC
